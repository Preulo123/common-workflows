name: CD for .NET packages (Reusable)

on:
  workflow_call:
    inputs:
      project-path:
        description: "Path to .csproj"
        required: true
        type: string
    secrets:
      NUGET_API_KEY:
        required: true

jobs:
  calc-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calc.outputs.version }}
      needs_rebuild: ${{ steps.calc.outputs.needs_rebuild }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: calc
        run: |
          set -euo pipefail

          # Reads the latest tag (current version); if not found, assumes 0.0.0
          last_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          last_version="${last_version#v}"

          major=$(echo "$last_version" | cut -d. -f1)
          minor=$(echo "$last_version" | cut -d. -f2)
          patch=$(echo "$last_version" | cut -d. -f3)

          # Gathers all commits since the latest version
          commits=$(git log "v${last_version}..HEAD" --pretty=format:%s || true)

          breaking=0
          feat=0
          fix=0

          while IFS= read -r msg; do
            if echo "$msg" | grep -q "BREAKING CHANGE"; then
              breaking=1
              break
            elif [ $feat -eq 0 ] && echo "$msg" | grep -qE "^feat(\(|:)" ; then
              feat=1
            elif [ $fix -eq 0 ] && echo "$msg" | grep -qE "^fix(\(|:)" ; then
              fix=1
            fi
          done <<< "$commits"

          if [[ $breaking -eq 1 ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ $feat -eq 1 ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ $fix -eq 1 ]]; then
            patch=$((patch + 1))
          else
            echo "No relevant changes found, version will not be updated"
            echo "needs_rebuild=false" >> "$GITHUB_OUTPUT"
            echo "version=$last_version" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "needs_rebuild=true" >> "$GITHUB_OUTPUT"
          new_version="${major}.${minor}.${patch}"
          echo "New version: $new_version"
          echo "version=$new_version" >> "$GITHUB_OUTPUT"

  pack-and-publish:
    runs-on: ubuntu-latest
    needs: calc-version
    if: ${{ needs.calc-version.outputs.needs_rebuild == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x
      - name: Restore
        run: dotnet restore ${{ inputs.project-path }}
      - name: Pack
        run: dotnet pack ${{ inputs.project-path }} -c Release -p:PackageVersion=${{ needs.calc-version.outputs.version }}
      - name: Publish
        run: dotnet nuget push "$(dirname ${{ inputs.project-path }})/bin/Release/*${{ needs.calc-version.outputs.version }}.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  tag:
    runs-on: ubuntu-latest
    needs: [calc-version, pack-and-publish]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Create Tag
        run: |
          git tag v${{ needs.calc-version.outputs.version }}
          git push origin v${{ needs.calc-version.outputs.version }}
